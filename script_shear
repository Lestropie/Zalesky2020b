#!/bin/bash

declare -a bundles=("1" "2")
declare -a methods=("SIFTopt" "SIFTgd" "SIFT2noreg" "SIFT2reg")
declare -a patients=("truncate" "shear")
declare -a sides=("left" "right")
declare -a subjects=("control" "shear" "truncate")

seedy=0.0

rm -rf tmp/
mkdir tmp/


for subject in "${subjects[@]}"; do

    case ${subject} in
    "control")
        FODIMAGE="data/FODs_control.mif"
        ;;
    "shear")
        FODIMAGE="data/FODs_shear.mif"
        ;;
    "truncate")
        FODIMAGE="data/FODs_control.mif"
        ;;
    esac

    sh2peaks ${FODIMAGE} tmp/peaks_${subject}.mif -num 1 -quiet

    track_file_list=""
    if [[ ${subject} == "truncate" ]]; then

        for side in "${sides[@]}"; do

            tracks_path="tmp/tracks_truncate_B1_${side}_full.tck"
            tckgen tmp/peaks_${subject}.mif -algorithm fact -seed_direction 1,0,0 -minlength 0 -step 0.001 -select 12 -seed_image data/mask_B1_${side}.mif -mask data/mask.mif ${tracks_path} -quiet
            track_file_list="${track_file_list} ${tracks_path}"
            tracks_path="tmp/tracks_truncate_B1_${side}_part.tck"
            tckgen tmp/peaks_${subject}.mif -algorithm fact -seed_direction 1,0,0 -minlength 0 -step 0.001 -select 8 -seed_image data/mask_B1_${side}.mif -mask data/mask_1path.mif ${tracks_path} -quiet
            track_file_list="${track_file_list} ${tracks_path}"

            tracks_path="tmp/tracks_truncate_B2_${side}.tck"
            tckgen tmp/peaks_${subject}.mif -algorithm fact -seed_direction 1,0,0 -minlength 0 -step 0.001 -select 20 -seed_image data/mask_B2_${side}.mif -mask data/mask.mif ${tracks_path} -quiet
            track_file_list="${track_file_list} ${tracks_path}"

        done

    else

        seedindex=0
        for bundle in "${bundles[@]}"; do

            if [[ ${bundle} == "1" ]]; then
                seedzstart=0.5
            else
                seedzstart=-1.5
            fi

            for side in "${sides[@]}"; do

                if [[ ${side} == "left" ]]; then
                    seedx=2.4995
                    seedzoffset=0.0125
                else
                    seedx=-2.4995
                    seedzoffset=0.0375
                fi

                for counter in {0..19}; do
                    seedz=$(echo "${seedzstart}+${seedzoffset}+(${counter}*0.05)" | bc)
                    let "seedindex=seedindex+1"
                    tracks_path="tmp/tracks_${subject}_${seedindex}.tck"
                    tckgen tmp/peaks_${subject}.mif -algorithm fact -seed_direction 1,0,0 -minlength 0 -step 0.001 -select 1 -seed_sphere ${seedx},${seedy},${seedz},1e-6 -mask data/mask.mif ${tracks_path} -quiet
                    track_file_list="${track_file_list} ${tracks_path}"
                done
            done
        done
    fi

    tckedit ${track_file_list} tmp/tracks_${subject}.tck -quiet
    rm -f ${track_file_list}

    # SIFT optimal solution
    case ${subject} in
        "control")
            cp tmp/tracks_${subject}.tck tmp/tracks_${subject}_SIFTopt.tck
            tcksift tmp/tracks_control_SIFTopt.tck ${FODIMAGE} tmp/tracks_control_SIFTopt_dummy.tck -out_mu tmp/mu_control_SIFTopt.txt -nofilter -quiet
            for bundle in "${bundles[@]}"; do
                tckedit tmp/tracks_${subject}_SIFTopt.tck -include data/mask_B${bundle}_left.mif -include data/mask_B${bundle}_right.mif tmp/tracks_${subject}_SIFTopt_B${bundle}.tck -quiet
            done
            ;;
        "shear")
            # No exhaustive optimal solution yet for shear
            ;;
        "truncate")
            tckedit tmp/tracks_truncate.tck -include data/mask_B1_left.mif -include data/mask_B1_right.mif tmp/tracks_truncate_SIFTopt_B1.tck -quiet
            tckedit tmp/tracks_truncate.tck -include data/mask_B2_left.mif -include data/mask_B2_right.mif -number 24 tmp/tracks_truncate_SIFTopt_B2.tck -quiet
            tckedit tmp/tracks_truncate_SIFTopt_B1.tck tmp/tracks_truncate_SIFTopt_B2.tck tmp/tracks_truncate_SIFTopt.tck -quiet
            tcksift tmp/tracks_truncate_SIFTopt.tck ${FODIMAGE} tmp/tracks_truncate_SIFTopt_dummy.tck -out_mu tmp/mu_truncate_SIFTopt.txt -nofilter -quiet
            ;;
    esac

    # SIFT gradient descent
    tcksift tmp/tracks_${subject}.tck ${FODIMAGE} tmp/tracks_${subject}_SIFTgd.tck -out_mu tmp/mu_${subject}_SIFTgd.txt -quiet
    for bundle in "${bundles[@]}"; do
        tckedit tmp/tracks_${subject}_SIFTgd.tck -include data/mask_B${bundle}_left.mif -include data/mask_B${bundle}_right.mif tmp/tracks_${subject}_SIFTgd_B${bundle}.tck -quiet
    done

    # SIFT2 with regularisation disabled (to better mimic "non-integer solution")
    tcksift2 tmp/tracks_${subject}.tck ${FODIMAGE} tmp/weights_${subject}_SIFT2noreg.txt -out_mu tmp/mu_${subject}_SIFT2noreg.txt -reg_tik 0.0 -reg_tv 0.0 -min_iters 100 -quiet
    for bundle in "${bundles[@]}"; do
        tckedit tmp/tracks_${subject}.tck -tck_weights_in tmp/weights_${subject}_SIFT2noreg.txt -include data/mask_B${bundle}_left.mif -include data/mask_B${bundle}_right.mif tmp/tracks_${subject}_SIFT2noreg_B${bundle}.tck -tck_weights_out tmp/weights_${subject}_SIFT2noreg_B${bundle}.txt -quiet
    done

    # SIFT2 with default regularisation
    tcksift2 tmp/tracks_${subject}.tck ${FODIMAGE} tmp/weights_${subject}_SIFT2reg.txt -out_mu tmp/mu_${subject}_SIFT2reg.txt -min_iters 100 -quiet
    for bundle in "${bundles[@]}"; do
        tckedit tmp/tracks_${subject}.tck -tck_weights_in tmp/weights_${subject}_SIFT2reg.txt -include data/mask_B${bundle}_left.mif -include data/mask_B${bundle}_right.mif tmp/tracks_${subject}_SIFT2reg_B${bundle}.tck -tck_weights_out tmp/weights_${subject}_SIFT2reg_B${bundle}.txt -quiet
    done

done



echo " Patient |           Method            |    % B1    |    % B2    "
echo "---------+-----------------------------+------------+------------"



for patient in "${patients[@]}"; do

    for method in "${methods[@]}"; do

        if [[ ! (${patient} == "shear" && ${method} == "SIFTopt" ) ]]; then

            case ${method} in
                "SIFTopt")
                    METHODSTRING="SIFT_(exhaustive_search)"
                    ;;
                "SIFTgd")
                    METHODSTRING="SIFT_(gradient_descent)"
                    ;;
                "SIFT2noreg")
                    METHODSTRING="SIFT2_(no_regularisation)"
                    ;;
                "SIFT2reg")
                    METHODSTRING="SIFT2_(with_regularisation)"
                    ;;
            esac

            MU_CONTROL=$(cat tmp/mu_control_${method}.txt)
            MU_PATIENT=$(cat tmp/mu_${patient}_${method}.txt)

            case ${method} in
                "SIFTopt" | "SIFTgd")
                    FBC_PATIENT_B1=$(echo "$MU_PATIENT * $(tckinfo tmp/tracks_${patient}_${method}_B1.tck | grep " count" | tr -d '[:space:]' | cut -d":" -f2)" | bc)
                    FBC_PATIENT_B2=$(echo "$MU_PATIENT * $(tckinfo tmp/tracks_${patient}_${method}_B2.tck | grep " count" | tr -d '[:space:]' | cut -d":" -f2)" | bc)
                    FBC_CONTROL_B1=$(echo "$MU_CONTROL * $(tckinfo tmp/tracks_control_${method}_B1.tck | grep " count" | tr -d '[:space:]' | cut -d":" -f2)" | bc)
                    FBC_CONTROL_B2=$(echo "$MU_CONTROL * $(tckinfo tmp/tracks_control_${method}_B2.tck | grep " count" | tr -d '[:space:]' | cut -d":" -f2)" | bc)
                    ;;
                "SIFT2noreg" | "SIFT2reg")
                    FBC_PATIENT_B1=$(tail -n1 tmp/weights_${patient}_${method}_B1.txt | tr " " "+" | sed 's/\(.*\)+$/\1/' | awk -v mu=${MU_PATIENT} '{printf("scale=6; %s*(%s)\n",mu,$1)}' | bc)
                    FBC_PATIENT_B2=$(tail -n1 tmp/weights_${patient}_${method}_B2.txt | tr " " "+" | sed 's/\(.*\)+$/\1/' | awk -v mu=${MU_PATIENT} '{printf("scale=6; %s*(%s)\n",mu,$1)}' | bc)
                    FBC_CONTROL_B1=$(tail -n1 tmp/weights_control_${method}_B1.txt | tr " " "+" | sed 's/\(.*\)+$/\1/' | awk -v mu=${MU_CONTROL} '{printf("scale=6; %s*(%s)\n",mu,$1)}' | bc)
                    FBC_CONTROL_B2=$(tail -n1 tmp/weights_control_${method}_B2.txt | tr " " "+" | sed 's/\(.*\)+$/\1/' | awk -v mu=${MU_CONTROL} '{printf("scale=6; %s*(%s)\n",mu,$1)}' | bc)
                    ;;
            esac

            EFFECTSIZE_B1=$(echo "scale=6; 100*(${FBC_CONTROL_B1}-${FBC_PATIENT_B1})/${FBC_CONTROL_B1}" | bc)
            EFFECTSIZE_B2=$(echo "scale=6; 100*(${FBC_CONTROL_B2}-${FBC_PATIENT_B2})/${FBC_CONTROL_B2}" | bc)

            printf "%8s | %27s | %10.6f | %10.6f\n" ${patient} ${METHODSTRING} ${EFFECTSIZE_B1} ${EFFECTSIZE_B2}

        fi

    done

    echo "---------+-----------------------------+------------+------------"

done

